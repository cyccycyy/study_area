// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {
	// ixxaccccccdddjjj
	// i==0 A instruction 
	// all bits but the highest bit are address bits
	// else C instruction
	// *xx is not used* 
	// ddd - where to store the computed result
	// jjj - jump 
	// a==0 A and D
	// a==1 M and D
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	Mux16 (a=instruction, b=aluOutput, sel=instruction[15], out=insAOrC);
	Not (in=instruction[15], out=noti);
	Or (a=instruction[5], b=noti, out=d1Ori);	
	ARegister (in=insAOrC, load= d1Ori, out=aOut, out[0..14]=addressM);	

	Mux16 (a=aOut, b=inM, sel=instruction[12], out=aluY);
	ALU (x=aluX, y=aluY, zx=instruction[11], nx=instruction[10], zy=instruction[9],
		 ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOutput, zr=zr,
		 ng=ng, out=outM);

	And (a=instruction[15], b=instruction[3], out=writeM);
	And (a=instruction[4], b=instruction[15], out=loadDRegister);
	DRegister (in=aluOutput, load=loadDRegister,  out=aluX);

	Not (in=zr, out=notzr);
	Not (in=ng, out=notng);
	And (a=notzr, b=notng, out=positive);
	And (a=zr, b=notng, out=equal);
	And (a=notzr, b=ng, out=negative);	
	And (a=positive, b=instruction[0], out=posJMP);
	And (a=equal, b=instruction[1], out=equalJMP);
	And (a=negative, b=instruction[2], out=negJMP);
	Or (a=posJMP, b=equalJMP, out=posorequalJMP);
	Or (a=posorequalJMP, b=negJMP, out=shouldJMP);
	And (a=shouldJMP, b=instruction[15], out=jmp);

	PC (in=aOut, inc=true, load=jmp, reset=reset, out[0..14]=pc); 
	
}
